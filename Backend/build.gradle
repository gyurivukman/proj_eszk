buildscript {
	ext {
		springBootVersion = '2.0.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "org.liquibase:liquibase-gradle-plugin:1.2.4"
		classpath "mysql:mysql-connector-java:5.1.16"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.liquibase.gradle'

group = 'elte.projeszk'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.liquibase:liquibase-core')
	runtime('mysql:mysql-connector-java')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}
def props = new Properties()
file("/src/main/resources/application.properties").withInputStream { props.load(it) }

liquibase{
	activities{
		migrate {
			changeLogFile 'src/main/resources/db/master.xml'
			url props.getProperty('spring.datasource.url')
			username props.getProperty('spring.datasource.username')
			password props.getProperty('spring.datasource.password')
		}

		seeddemo{
			changeLogFile 'src/main/resources/db/seeddemo.xml'
			url props.getProperty('spring.datasource.url')
			username props.getProperty('spring.datasource.username')
			password props.getProperty('spring.datasource.password')
		}

		generateDiffLog {
			changeLogFile 'src/main/resources/db/changelog/'+this.buildTimestamp()+'.xml'
			url props.getProperty('spring.datasource.url')
			username props.getProperty('spring.datasource.username')
			password props.getProperty('spring.datasource.password')

			referenceUrl props.getProperty('liquibase.referencedb.url')
			referenceUsername props.getProperty('liquibase.referencedb.username')
			referencePassword props.getProperty('liquibase.referencedb.password')
		}
	}
	if(!project.hasProperty('runList')){
		runList = "migrate"
	}else{
		runList = project.ext.runList
	}

}
def buildTimestamp() {
	def date = new Date()
	def formattedDate = date.format('yyyyMMddHHmmss')
	return formattedDate
}